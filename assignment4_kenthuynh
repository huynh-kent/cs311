import random
import string
import itertools

NODE_COUNT_PER_LAYER = [4,3,2]

class Node:
    def __init__(self):
        self.children = [] #connection to children
        self.weight = [] #weight of connection to children
        self.value = 0
        self.node_name = ''
        random_letters = []

        for i in range(3): #set node name to random 3 uppercase letters
            random_letters.append( random.choice(string.ascii_uppercase) )
        self.node_name = ''.join(random_letters)

    def set_value(self, value):
        self.value = value

    def make_children(self, current_layer_number, node_per_layer_map): #make nodes for each layer
        if current_layer_number >= len(node_per_layer_map): #terminate recursion
            return

        for i in range ( node_per_layer_map[current_layer_number] ): 
            self.children.append( Node() )

        self.children[0].make_children( current_layer_number + 1, node_per_layer_map)

        for i in range(0, len(self.children) ):
            self.children[i].children = self.children[0].children[:]
        
    def print_connections(self, current_layer_number, node_per_layer_map):
        indent = '           ' * current_layer_number
        
        if current_layer_number >= len(node_per_layer_map): #end function
            print(f"{indent} {self.node_name}")
            return

        print(f"{indent} -{self.node_name} is connected to:")

        for i in range( len(self.children) ):
            try:
                print(f"{indent}    with weight of {self.weight[i]}")
            except:
                pass
            self.children[i].print_connections(current_layer_number + 1, node_per_layer_map,)
        return

    def set_random_weights(self, current_layer_number, node_per_layer_map):
        if current_layer_number >= len(node_per_layer_map): #end function
            return

        self.weight = [0.0] * len(self.children)

        for i in range( len(self.children) ):
            self.weight[i] = random.uniform(0, 1)
            self.children[i].set_random_weights(current_layer_number + 1, node_per_layer_map)
        return

#main
new_node = Node() #make master node
new_node.make_children(0,NODE_COUNT_PER_LAYER) #make children from master node

#print node connections w/o weights
print("--------NODE CONNECTIONS--------")
new_node.print_connections(0, NODE_COUNT_PER_LAYER)

#adding weights
new_node.set_random_weights(0, NODE_COUNT_PER_LAYER)
#print connections w/ weights
print("\n--------CONNECTIONS WITH WEIGHTS--------")
new_node.print_connections(0, NODE_COUNT_PER_LAYER)

ann_input = list(itertools.product([0,1], repeat=4))
ann_output = []

for d in ann_input:
        ann_output.append( [d[0] and d[1], d[2] and d[3]] )

print("\n--------INPUTS & OUTPUTS--------\n\n    INPUT       OUTPUT")
for i in range( len(ann_input) ):
        print(f"{ann_input[i]} -> {ann_output[i]}")
